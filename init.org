#+Title: GNU Emacs Configuration
#+AUTHOR: Fabian KÃ¶hler
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
 (when (equal (buffer-file-name)
              (expand-file-name (concat user-emacs-directory "init.org")))
   (let ((prog-mode-hook nil))
     (org-babel-tangle)
     (byte-compile-file (concat user-emacs-directory "init.el")))))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC

* Packages
#+BEGIN_SRC emacs-lisp
(require 'cl)
(require 'package)
(package-initialize)
(setq package-archives
      '(("gnu" . "https://elpa.gnu.org/packages/")
        ("marmalade" . "https://marmalade-repo.org/packages/")
        ("melpa" . "https://melpa.org/packages/")))
(package-refresh-contents)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq packages '(
          aggressive-indent
          all-the-icons
          all-the-icons-dired
          ansible
          auto-package-update
          beacon
          clang-format
          cmake-mode
          cmake-font-lock
          company
          company-irony
          company-lsp
          company-quickhelp
          cquery
          csharp-mode
          dashboard
          ess
          esup
          evil
          evil-commentary
          evil-magit
          evil-org
          flycheck
          flycheck-irony
          ggtags
          gitconfig-mode
          gitignore-mode
          go-mode
          graphviz-dot-mode
          haskell-mode
          helm
          helm-ls-git
          helm-ls-hg
          helm-ls-svn
          helm-projectile
          highlight-indent-guides
          irony
          irony-eldoc
	  lsp-mode
          lsp-python
          lsp-ui
          magit
          monokai-theme
          neotree
          nlinum
          omnisharp
          org-bullets
          powerline
          projectile
          pyvenv
          spaceline
          spaceline-all-the-icons
          undo-tree
          web-mode
          whitespace-cleanup-mode
          yaml-mode
          yasnippet
          ))
(dolist (package packages)
  (unless (package-installed-p package)
    (package-install package)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 90)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'auto-package-update)
  (setq auto-package-update-interval 2)
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-prompt-before-update t)
  (add-hook 'auto-package-update-before-hook
            (lambda () (message "Run scheduled update of emacs packages")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'dashboard)
(dashboard-setup-startup-hook)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq initial-buffer-choice
        (lambda ()
          (switch-to-buffer "*dashboard*")))
#+END_SRC

* Global
  #+BEGIN_SRC emacs-lisp
  ;; use tabs instead of whitespaces
  (setq-default indent-tabs-mode nil)
  
  ;; disable the clunky interface
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)
  
  ;; treat camelcase as individual words
  (add-hook 'prog-mode-hook 'subword-mode)
  
  ;; make scripts executable on save
  (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
  
  ;; only run garbage collection every 64MB
  (setq-default gc-cons-threshold 67108864)
  
  ;; determine how dired lists files
  (setq-default dired-listing-switches "-lah")
  
  ;; do not ask yes/no but y/n
  (fset 'yes-or-no-p 'y-or-n-p)
  
  ;; turn on syntax highlighting whenever it is possible
  (global-font-lock-mode t)
  
  ;; always reload files that change
  (global-auto-revert-mode t)
  
  ;; show matching parentheses immediately
  (show-paren-mode 1)
  (setq-default show-paren-delay 0.0)
  
  ;; highlight current line
  (require 'hl-line)
  (global-hl-line-mode)
  
  ;; show whitespaces and newlines
  (require 'whitespace)
  
  ;; clipboard
  (setq-default select-enable-clipboard t)
  (setq-default interprogram-paste-function 'x-cut-buffer-or-selection-value)
  
  ;; change location of customizations and protect init.el
  (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file 'noerror)
  
  ;; wind move for window navigation
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))
  #+END_SRC
  
  #+BEGIN_SRC emacs-lisp
    (setq save-interprogram-paste-before-kill t)
    (setq mouse-yank-at-point t)
    (setq require-final-newline t)
  #+END_SRC
   
** Editor Behavior
   Automatically clean whitespaces on save.
   #+BEGIN_SRC emacs-lisp
   (require 'whitespace-cleanup-mode)
   (global-whitespace-cleanup-mode)
   #+END_SRC
   
   Automatically indent code, specify desired modes
   #+BEGIN_SRC emacs-lisp
   (require 'aggressive-indent)
   (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
   #+END_SRC

* Vim-like Behavior
  I am a vim user and want to work in a similar fashion with emacs as well.
  #+BEGIN_SRC emacs-lisp
  (setq evil-want-C-d-scroll t)
  (setq evil-want-C-u-scroll t)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
  (require 'evil)
  (evil-mode 1)
  
  ;; use escape key to cancel
  (global-set-key [escape] 'keyboard-escape-quit)
  (define-key isearch-mode-map [escape] 'isearch-abort)
  (define-key isearch-mode-map "\e" 'isearch-abort)
  #+END_SRC
  
** Comments
   #+BEGIN_SRC emacs-lisp
   (require 'evil-commentary)
   (evil-commentary-mode)
   #+END_SRC
  
** Org-Mode
   #+BEGIN_SRC emacs-lisp
   (require 'evil-org)
   #+END_SRC
  
  #+BEGIN_SRC emacs-lisp
  #+END_SRC
  
** Vinegar
   #+BEGIN_SRC emacs-lisp
   ;; vinegar
   (defun vinegar/top ()
     "Go to the top of the dired buffer"
     (interactive)
     (goto-char (point-min))
     (dired-next-line 1))
   
   (defun vinegar/bottom ()
     "Go to the bottom of the dired buffer"
     (interactive)
     (goto-char (point-max))
     (dired-next-line -1))
   
   (defun vinegar/up ()
     "Go one entry up in dired"
     (interactive)
     (dired-previous-line 1)
     (if (bobp) (dired-next-line 1)))
   
   (defun vinegar/down ()
     "Go one entry down in dired"
     (interactive)
     (dired-next-line 1)
     (if (eobp) (dired-next-line -1)))
   
   (defun vinegar/parent-dir (&optional window)
     "Jump to parent dir using dired"
     (interactive "P")
     (let* ((dir (dired-current-directory))
   	 (orig (current-buffer))
   	 (up (file-name-directory (directory-file-name dir))))
       (or (dired-goto-file (directory-file-name dir))
   	(and (cdr dired-subdir-alist)
   	     (dired-goto-subdir up))
   	(progn
   	  (kill-buffer orig)
   	  (dired up)
   	  (dired-goto-file dir)))))
   
   (defun vinegar/init ()
     "Setup vim-vinegar like keybindings for dired"
     (define-key dired-mode-map (kbd "j") 'vinegar/down)
     (define-key dired-mode-map (kbd "k") 'vinegar/up)
     (define-key dired-mode-map (kbd "-") 'vinegar/parent-dir)
     ;; (define-key dired-mode-map (kbd "g g") 'vinegar/top)
     (define-key dired-mode-map (kbd "G") 'vinegar/bottom)
     (define-key dired-mode-map (kbd "d") 'dired-create-directory)
     (define-key dired-mode-map (kbd "% s") 'find-file))

   (add-hook 'dired-mode-hook 'vinegar/init)
   (define-key evil-normal-state-map (kbd "-") 'dired-jump)
   #+END_SRC

** Line Numbers
   #+BEGIN_SRC emacs-lisp
   (require 'nlinum)
   (setq nlinum-format "%4d\u2502")
   (setq nlinum-highlight-current-line 1)
   (global-nlinum-mode)
   #+END_SRC
* Version Control
  #+BEGIN_SRC emacs-lisp
  (require 'magit)
  (require 'evil-magit)  
  #+END_SRC
  
* Project
  #+BEGIN_SRC emacs-lisp
    (require 'projectile)
    (projectile-mode)
  #+END_SRC
* Language Support
** Language Server Protocol
    #+BEGIN_SRC emacs-lisp
      (require 'lsp-mode)
      (require 'lsp-ui)

      (add-hook 'lsp-mode-hook 'lsp-ui-mode)
      (setq-default lsp-message-project-root-warning t)

    #+END_SRC

** Company
  #+BEGIN_SRC emacs-lisp
  (require 'company)
  (require 'company-quickhelp)
  
  ;; do not wait to complete
  (setq company-idle-delay 0)
  
  ;; do no use the clang backend
  ;; we will use irony-mode instead
  (delete 'company-clang company-backends)
  
  ;; use language server protocol in company-mode
  (require 'company-lsp)
  (push 'company-lsp company-backends)
  
  ;; enable company globally
  (global-company-mode)
  
  ;; enable company-quickhelp globally
  (company-quickhelp-mode)
  #+END_SRC
** Ansible YAML
  #+BEGIN_SRC emacs-lisp
  (require 'ansible)
  #+END_SRC
  
** C/C++
  #+BEGIN_SRC emacs-lisp
    ;;(require 'irony)
    ;;(add-hook 'c++-mode-hook 'irony-mode)
    ;;(add-hook 'c-mode-hook 'irony-mode)
    ;;(add-hook 'objc-mode-hook 'irony-mode)
    ;;(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
    (require 'cquery)
    (defun cquery/enable ()
      (condition-case nil
          (lsp-cquery-enable)
        (user-error nil)))
        
    (setq cquery-executable "/usr/bin/cquery")

    (add-hook 'c-mode-hook #'cquery/enable)
    (add-hook 'c++-mode-hook #'cquery/enable)
  #+END_SRC
  
** C#
#+BEGIN_SRC emacs-lisp
  (eval-after-load
    'company
    '(add-to-list 'company-backends #'company-omnisharp))

  (defun my-csharp-mode-setup ()
    (omnisharp-mode)
    (company-mode)
    (flycheck-mode)

    (setq indent-tabs-mode nil)
    (setq c-syntactic-indentation t)
    (c-set-style "ellemtel")
    (setq c-basic-offset 4)
    (setq truncate-lines t)
    (setq tab-width 4)
    (setq evil-shift-width 4)

    (electric-pair-local-mode 1) ;; Emacs 25

    (local-set-key (kbd "C-c r r") 'omnisharp-run-code-action-refactoring)
    (local-set-key (kbd "C-c C-c") 'recompile))

  (add-hook 'csharp-mode-hook 'my-csharp-mode-setup t)
#+END_SRC
** Fortran
   #+BEGIN_SRC emacs-lisp
     ;; (require 'projectile)

     ;; (lsp-define-stdio-client fortls "fortran"
     ;;                          #'projectile-project-root
     ;;                          (list "fortls" "--lowercase_intrinsics"))
     ;; (add-hook 'f90-mode #'fortls-enable)
   #+END_SRC
   #+BEGIN_SRC emacs-lisp
     (setq-default f90-do-indent 4)
     (setq-default f90-if-indent 4)
     (setq-default f90-type-indent 4)
     (setq-default f90-program-indent 4)
     (setq-default f90-continuation-indent 4)
     (setq-default f90-smart-end 'blink)
   #+END_SRC
  
** Git
  #+BEGIN_SRC emacs-lisp
  (require 'gitconfig-mode)
  (require 'gitignore-mode)
  #+END_SRC
  
** Go
  #+BEGIN_SRC emacs-lisp
  (require 'go-mode)
  #+END_SRC
  
** Graphviz
  #+BEGIN_SRC emacs-lisp
  (require 'graphviz-dot-mode)
  #+END_SRC
  
** Haskell
  #+BEGIN_SRC emacs-lisp
  (require 'haskell-mode)
  #+END_SRC
  
** Julia
  #+BEGIN_SRC emacs-lisp
    ;; (require 'julia-mode)
    ;; (require 'ess-site)
    ;; (require 'ess-julia)
  #+END_SRC

** LaTeX
  #+BEGIN_SRC emacs-lisp
  ;; (require 'auctex)
  ;; (require 'company-auctex)
  ;; (setq TeX-auto-save t)
  ;; (setq TeX-parse-self t)
  ;; (setq-default TeX-master nil)
  ;; (add-hook 'LaTeX-mode-hook
  ;;           (progn
  ;;             (company-auctex-init)
  ;;             (setq evil-shift-width 2)))
  #+END_SRC
  
** Python
   
   #+BEGIN_SRC emacs-lisp
     (let ((anaconda-bin-path (expand-file-name "~/.local/opt/anaconda3/bin")))
       (if (file-directory-p anaconda-bin-path)
           (progn
             (setenv "PATH" (concat anaconda-bin-path ":" (getenv "PATH")))
             (push anaconda-bin-path exec-path))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (require 'pyvenv)

     (let ((anaconda-env-path (expand-file-name "~/.local/opt/anaconda3/envs")))
       (if (file-directory-p anaconda-env-path)
           (setenv "WORKON_HOME" anaconda-env-path)))

     (pyvenv-mode 1)
   #+END_SRC
   
   #+BEGIN_SRC emacs-lisp
     (defvar lsp-python-log-dir)
     (setq lsp-python-log-dir (expand-file-name "~/.emacs.d/logs/lsp-python"))

     (defvar lsp-python-log-file)
     (setq lsp-python-log-file (concat lsp-python-log-dir "/pyls.log"))

     (make-directory lsp-python-log-dir t)
   #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (require 'lsp-mode)
    (require 'lsp-python)
    (add-hook 'python-mode-hook #'lsp-python-enable)
  #+END_SRC

  
** Web
  #+BEGIN_SRC emacs-lisp
  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.scss\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . web-mode))
  (add-hook 'web-mode-hook
            (lambda ()
              (setq evil-shift-width 2)
              (setq indent-tabs-mode nil)
              (setq web-mode-markup-indent-offset 2)
              (setq web-mode-css-indent-offset 2)
              (setq web-mode-code-indent-offset 2)))
  #+END_SRC
  
** YAML
  #+BEGIN_SRC emacs-lisp
  (require 'yaml-mode)
  #+END_SRC
      
* Auto Completion
  
  # - C++
  #   #+BEGIN_SRC emacs-lisp
  #   (require 'company-irony)
  #   (add-to-list 'company-backends 'company-irony)
  #   #+END_SRC
    
  # - Julia
  #   #+BEGIN_SRC emacs-lisp
  #   (setq ess-use-company t) 
  #   (add-to-list 'company-dabbrev-code-modes 'ess-mode)
  #   #+END_SRC 
    
  # - Python
  #   #+BEGIN_SRC emacs-lisp
  #   (add-hook 'python-mode-hook
  #             (lambda ()
  #               (set (make-local-variable 'company-backends) '(elpy-company-backend))))
  #   #+END_SRC
  
* Linting
  #+BEGIN_SRC emacs-lisp
    (require 'flycheck)
    (global-flycheck-mode)
  #+END_SRC
#   - C/C++
#     #+BEGIN_SRC emacs-lisp
#     (add-hook 'flycheck-mode-hook #'flycheck-irony-setup)
#     #+END_SRC

* Visuals
** Theme
   #+BEGIN_SRC emacs-lisp
   (load-theme 'monokai t)
   #+END_SRC
  
** Beacon
   #+BEGIN_SRC emacs-lisp
   (require 'beacon)
   
   (setq beacon-color "#657b83")
   (setq beacon-size 30)
   (setq beacon-blink-duration 0.1)
   (setq beacon-blink-duration 0.05)
   (beacon-mode 1)
   #+END_SRC

** All the Icons
   # #+BEGIN_SRC emacs-lisp
   # (require 'all-the-icons)
   # (require 'all-the-icons-dired)
   # (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
   # #+END_SRC
   
** Powerline
   #+BEGIN_SRC emacs-lisp
   ;;(require 'powerline)
   ;;(require 'spaceline)
   ;;(require 'spaceline-all-the-icons)
   ;;(setq spaceline-all-the-icons-separator-type 'wave)
   ;;(spaceline-all-the-icons-theme)
   #+END_SRC
** Indent Guides
   #+BEGIN_SRC emacs-lisp
   (require 'highlight-indent-guides)
   (setq highlight-indent-guides-method 'column)
   (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
   #+END_SRC
** Org-Mode
   #+BEGIN_SRC emacs-lisp
   (add-hook 'org-mode-hook (lambda () (org-bullets-mode)))
   #+END_SRC
   
** Pretty Mode
   #+BEGIN_SRC emacs-lisp
   (setq prettify-symbols-unprettify-at-point 'right-edge)
   (global-prettify-symbols-mode +1)
   #+END_SRC

*** C++
    #+BEGIN_SRC emacs-lisp
    (defun pretty-mode/c ()
      "Prettify symbols in C mode."
      (setq prettify-symbols-alist
            (append prettify-symbols-alist
                    '(("!=" . ?â )
                      ("<=" . ?â¤)
                      (">=" . ?â¥)
                      ("&&" . ?â§)
                      ("||" . ?â¨)
                      ("<<" . ?âª)
                      (">>" . ?â«)))))

    (defun pretty-mode/c++ ()
      "Prettify symbols in C++ mode."
      (pretty-mode/c))

    (add-hook 'c-mode 'pretty-mode/c)
    (add-hook 'c++-mode 'pretty-mode/c++)
    #+END_SRC
*** Emacs Lisp
    #+BEGIN_SRC emacs-lisp
    (defun pretty-mode/emacs-lisp ()
      "Prettify symbols in Emacs Lisp mode."
      (setq prettify-symbols-alist
            '(("lambda" . ?Î»)
              ("defun"  . ?Ï)
              ("!="     . ?â )
              ("<="     . ?â¤)
              (">="     . ?â¥))))

    (add-hook 'emacs-lisp-mode-hook 'pretty-mode/emacs-lisp)
    #+END_SRC
*** Haskell
    #+BEGIN_SRC emacs-lisp
    (defun pretty-mode/haskell ()
      (setq prettify-symbols-alist
            '(
              ("&&" . ?â§)
              ("++" . ?â§º)
              ("+++" . ?â§»)
              ("-->" . ?â¶)
              ("->" . ?â)
              ("..." . ?â¦)
              ("/<" . ?â®)
              ("/=" . ?â )
              ("/>" . ?â¯)
              ("::" . ?â·)
              (":=" . ?â)
              ("<*>" . ?â)
              ("<-" . ?â)
              ("<--" . ?âµ)
              ("<-->" . ?â·)
              ("<->" . ?â)
              ("<<" . ?âª)
              ("<<<" . ?â)
              ("<=" . ?â¤)
              ("<==" . ?â¸)
              ("<==>" . ?âº)
              ("<=>" . ?â)
              ("<|" . ?â²)
              ("=:" . ?â)
              ("==" . ?â¡)
              ("==>" . ?â¹)
              ("=>" . ?â)
              ("=?" . ?â)
              ("=def" . ?â)
              ("><" . ?â)
              (">=" . ?â¥)
              (">>" . ?â«)
              (">>>" . ?â)
              ("elem" . ?â)
              ("empty" . ?â)
              ("intersection" . ?â©)
              ("isProperSubsetOf" . ?â)
              ("isSubsetOf" . ?â)
              ("mappend" . ?â)
              ("member" . ?â)
              ("mempty" . ?â)
              ("not" . ?Â¬)
              ("notElem" . ?â)
              ("notMember" . ?â)
              ("undefined" . ?â¥)
              ("union" . ?âª)
              ("|>" . ?â³)
              ("||" . ?â¨)
              )))

    (add-hook 'haskell-mode-hook 'pretty-mode/haskell)
    #+END_SRC
*** Fortran
    #+BEGIN_SRC emacs-lisp
    (defun pretty-mode/f90 ()
      "Prettify symbols in Fortran mode."
      (setq prettify-symbols-alist
            (append prettify-symbols-alist
                    '((".not." . ?Â¬)
                      (".and." . ?â§)
                      (".or."  . ?â¨)))))

    (add-hook 'f90-mode-hook 'pretty-mode/f90)
    #+END_SRC
*** Python
    #+BEGIN_SRC emacs-lisp
    (defun pretty-mode/add-greek ()
      " add prettified versions of greek letters"
      (setq prettify-symbols-alist
            (append prettify-symbols-alist
                    '(("alpha"   . ?Î±)
                      ("beta"    . ?Î²)
                      ("gamma"   . ?Î³)
                      ("delta"   . ?Î´)
                      ("epsilon" . ?Îµ)
                      ("zeta"    . ?Î¶)
                      ("eta"     . ?Î·)
                      ("theta"   . ?Î¸)))))

    (defun pretty-mode/python ()
      "Prettify symbols in python mode."
      (progn
        (setq prettify-symbols-alist
              '(("lambda" . ?Î»)
                ("def"    . ?Ï)
                ("!="     . ?â )
                ("<="     . ?â¤)
                (">="     . ?â¥)
                ("in"     . ?â)
                ("not in" . ?â)
                ("for"    . ?â)
                ("or"     . ?â¨)
                ("and"    . ?â§)
                ("not"    . ?Â¬)
                ("->"     . ?â)))
        (pretty-mode/add-greek)))

    (add-hook 'python-mode-hook 'pretty-mode/python)
    #+END_SRC

* Playerctl
  #+BEGIN_SRC emacs-lisp
  (defun playerctl/command (command message)
    "Call playerctl asynchronously and display a message."
    (if (executable-find "playerctl")
        (progn
          (start-process "elplayerctl" nil "playerctl" command)
          (message message))
      (message "playerctl not available")))

  (defun song-pause()
    "Pause playback using playerctl"
    (interactive)
    (playerctl/command "play-pause" "Toggle playback"))

  (defun song-next()
    "Skip to next song using playerctl"
    (interactive)
    (playerctl/command "next" "Next song"))

  (defun song-prev()
    "Go back to previous song using playerctl"
    (interactive)
    (playerctl/command "previous" "Previous song"))

  (defun song-stop()
    "Stop playback using playerctl"
    (interactive)
    (playerctl/command "stop" "Stop music"))
  #+END_SRC

* Helm

#+BEGIN_SRC emacs-lisp
  (require 'helm)
  (setq projectile-completion-system 'helm)
  (helm-projectile-on)
  (define-key evil-normal-state-map (kbd "C-p") 'helm-browse-project)
#+END_SRC

* Neotree
#+BEGIN_SRC emacs-lisp
(require 'neotree)
(setq-default neo-theme (if (display-graphic-p) 'icons 'arrow))
(global-set-key [f8] 'neotree-toggle)
(evil-define-key 'normal neotree-mode-amp (kbd "TAB") 'neotree-enter)
(evil-define-key 'normal neotree-mode-amp (kbd "SPC") 'neotree-quick-look)
(evil-define-key 'normal neotree-mode-amp (kbd "q") 'neotree-hide)
(evil-define-key 'normal neotree-mode-amp (kbd "RET") 'neotree-enter)
#+END_SRC
